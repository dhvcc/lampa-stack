server {
    listen 80;
    server_name _;

    location /plugins {
        alias /app/plugins;
    }

    # Proxy with path-based URL (avoiding query parameter encoding issues)
    location ~ ^/proxy/(.*)$ {
        # Add DNS resolver for external domains
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Extract URL from path and reconstruct it
        set $target_url $1;
        
        # Fix double slashes that nginx collapses
        if ($target_url ~ "^http:/(.*)") {
            set $target_url "http://$1";
        }
        if ($target_url ~ "^https:/(.*)") {
            set $target_url "https://$1";
        }
        
        proxy_pass $target_url;
        proxy_http_version 1.1;
        
        # Pass through original headers
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Referer $http_referer;
        proxy_set_header Range $http_range;
        
        # Support for video streaming
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
        
        # Support range requests for video seeking
        proxy_set_header Accept-Ranges bytes;
        proxy_pass_header Accept-Ranges;
        proxy_pass_header Content-Range;
        proxy_pass_header Content-Length;
        proxy_pass_header Content-Type;
        
        # Intercept and rewrite Location headers for redirects
        proxy_redirect ~^http://(.*)$ https://$host/proxy/http://$1;
        
        # CORS headers for cross-origin requests
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
        add_header Access-Control-Allow-Headers "Range, Content-Type, Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Range, Content-Length, Accept-Ranges" always;
    }

    # Handle OPTIONS requests for CORS
    location = /proxy/options {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD" always;
        add_header Access-Control-Allow-Headers "Range, Content-Type, Authorization" always;
        add_header Access-Control-Max-Age 1728000 always;
        add_header Content-Type 'text/plain; charset=utf-8' always;
        add_header Content-Length 0 always;
        return 204;
    }

    location /lampainit.js {
        proxy_pass http://lampac:9118;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable sub_filter
        # No encoding to allow sub_filter to work
        proxy_set_header Accept-Encoding "";
        # Enable buffering for sub_filter to work
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Inject lampa-stack.js code via eval
        sub_filter 'appload() {' 'appload() { fetch("/plugins/lampa-stack.js").then(r=>r.text()).then(eval);';

        # Force proxy tmdb
        sub_filter "    Lampa.Storage.set('proxy_tmdb'," "    Lampa.Storage.set('proxy_tmdb', true);(";
        # Custom plugins
        sub_filter 'var plugins_add = [' 'var plugins_add = [{ url: "https://nb557.github.io/plugins/rating.js", status: 1, name: "Рейтинг КиноПоиск и IMDB", author: "@t_anton", },{ "url": "/plugins/tv2.js", "status": 1, "name": "Телевидение by Skaz ", "author": "@helpiptv" },';
        # Reload plugins if issues
        sub_filter "if (Lampa.Storage.get('lampac_initiale', 'false')) return;" "";

        
        sub_filter_once on;
        sub_filter_types application/javascript;
    }

    location /tv.js {
        proxy_pass http://skaz.tv/tv.js;

        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable sub_filter
        # No encoding to allow sub_filter to work
        proxy_set_header Accept-Encoding "";
        # Enable buffering for sub_filter to work
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Inject lampa-stack.js code via eval
        sub_filter 'http://' 'https://';

        
        sub_filter_once on;
        sub_filter_types application/javascript;
    }

    location / {
        proxy_pass http://lampac:9118;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }
}
