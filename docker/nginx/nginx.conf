server {
    listen 80;
    server_name _;

    location /plugins {
        alias /app/plugins;
    }

    location / {
        proxy_pass http://lampac:9118;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;

        # No encoding to allow sub_filter to work
        proxy_set_header Accept-Encoding "";
        # Enable buffering for sub_filter to work
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Inject lampa-stack.js code directly into firstinitiale() function
        sub_filter 'firstinitiale() {' 'firstinitiale() {
          console.log("Lampa Stack", "Starting", "");
          
          // Wait for Lampa to be available
          var timer = setInterval(function() {
            if (typeof Lampa !== "undefined") {
              clearInterval(timer);
              console.log("Lampa Stack: Lampa detected, initializing");
              
              const DEFAULT_PLUGINS = [
                {
                  url: "https://nb557.github.io/plugins/rating.js",
                  status: 1,
                  name: "Рейтинг КиноПоиск и IMDB",
                  author: "@t_anton",
                },
              ];
              
              const DEFAULT_MENU_SORT = [
                Lampa.Lang.translate("menu_main"),
                Lampa.Lang.translate("menu_feed"),
                Lampa.Lang.translate("settings_input_links"),
                Lampa.Lang.translate("title_subscribes"),
                Lampa.Lang.translate("menu_history"),
                Lampa.Lang.translate("menu_torrents"),
                Lampa.Lang.translate("menu_timeline"),
                Lampa.Lang.translate("menu_movies"),
                Lampa.Lang.translate("title_persons"),
                Lampa.Lang.translate("menu_tv"),
                Lampa.Lang.translate("menu_catalog"),
                Lampa.Lang.translate("menu_relises"),
                "Коллекции",
                Lampa.Lang.translate("menu_filter"),
                Lampa.Lang.translate("menu_anime"),
                "Shikimori icon\\n            \\n            Shikimori",
                Lampa.Lang.translate("Shikimori"),
              ];
              
              let DEFAULT_MENU_HIDE = [
                Lampa.Lang.translate("menu_feed"),
                Lampa.Lang.translate("title_persons"),
                Lampa.Lang.translate("menu_relises"),
              ];
              
              const DEFAULT_SETTINGS = {
                account_use: true,
                screensaver_type: "cub",
                proxy_tmdb: true,
                parser_use: true,
                parse_in_search: true,
                vpn_checked_ready: true,
                menu_sort: DEFAULT_MENU_SORT,
                menu_hide: DEFAULT_MENU_HIDE,
              };
              
              function setSettingIfNotExists(key, value) {
                if (Lampa.Storage.get(key, "") === "") {
                  console.log("Lampa Stack: Setting default setting: " + key + "=" + value);
                  Lampa.Storage.set(key, value);
                }
              }
              
              function addPluginIfDoesntExist(plugin) {
                var plugins = Lampa.Plugins.get();
                if (!plugins.find(function(p) { return p.url === plugin.url; })) {
                  console.log("Lampa Stack: Adding plugin:", plugin.name);
                  Lampa.Plugins.add(plugin);
                  Lampa.Plugins.save();
                }
              }
              
              function disableUnwantedElements() {
                Lampa.Template.add("DisableAds", "<style> .ad-server{display: none;} .open--premium{display: none;}</style>");
                $("body").append(Lampa.Template.get("DisableAds", {}, true));
              }
              
              function initLampaStack() {
                console.log("Lampa Stack: Initializing plugins and settings");
                
                var plugins_to_load = [];
                for (let plugin of DEFAULT_PLUGINS) {
                  var plugins = Lampa.Plugins.get();
                  if (!plugins.find(function(p) { return p.url === plugin.url; })) {
                    addPluginIfDoesntExist(plugin);
                    plugins_to_load.push(plugin.url);
                  }
                }
                
                if (plugins_to_load.length) {
                  console.log("Lampa Stack: Loading new plugins:", plugins_to_load);
                  Lampa.Utils.putScript(plugins_to_load, function() {
                    console.log("Lampa Stack: Plugins loaded successfully");
                  }, function() {
                    console.log("Lampa Stack: Error loading some plugins");
                  }, function() {}, true);
                }
                
                for (let key in DEFAULT_SETTINGS) {
                  setSettingIfNotExists(key, DEFAULT_SETTINGS[key]);
                }
                
                disableUnwantedElements();
                console.log("Lampa Stack: Initialization complete");
              }
              
              initLampaStack();
            }
          }, 200);';
        
        sub_filter_once on;
        sub_filter_types text/html;
    }
}
